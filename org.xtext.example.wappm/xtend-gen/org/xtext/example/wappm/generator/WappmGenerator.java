/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.wappm.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.example.wappm.wappm.AppTypes;
import org.xtext.example.wappm.wappm.Attribute;
import org.xtext.example.wappm.wappm.ContentLayer;
import org.xtext.example.wappm.wappm.DetailPage;
import org.xtext.example.wappm.wappm.DynamicPage;
import org.xtext.example.wappm.wappm.HypertextLayer;
import org.xtext.example.wappm.wappm.IndexPage;
import org.xtext.example.wappm.wappm.Page;
import org.xtext.example.wappm.wappm.StaticPage;
import org.xtext.example.wappm.wappm.URL;
import org.xtext.example.wappm.wappm.WebClass;
import org.xtext.example.wappm.wappm.WebModel;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class WappmGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<WebModel> _filter = Iterables.<WebModel>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), WebModel.class);
    for (final WebModel w : _filter) {
      String _name = w.getName();
      String _plus = (_name + ".java");
      fsa.generateFile(_plus, 
        this.compile(w));
    }
  }
  
  public CharSequence compile(final WebModel w) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _name = w.getName();
    _builder.append(_name);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _compile = this.compile(w.getHypertext());
    _builder.append(_compile);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    CharSequence _compile_1 = this.compile(w.getContent());
    _builder.append(_compile_1);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final HypertextLayer h) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Page> _pages = h.getPages();
      for(final Page p : _pages) {
        CharSequence _compile = this.compile(p);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Page p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((p instanceof DynamicPage)) {
        CharSequence _compile = this.compile(((DynamicPage) p));
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      } else {
        if ((p instanceof StaticPage)) {
          CharSequence _compile_1 = this.compile(((StaticPage) p));
          _builder.append(_compile_1);
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final DynamicPage dp) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((dp instanceof IndexPage)) {
        CharSequence _compile = this.compile(((IndexPage) dp));
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      } else {
        if ((dp instanceof DetailPage)) {
          CharSequence _compile_1 = this.compile(((DetailPage) dp));
          _builder.append(_compile_1);
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final IndexPage ip) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = ip.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("String path = ");
    URL _path = ip.getPath();
    _builder.append(_path, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    String _name_1 = ip.getDisplayedClass().getName();
    _builder.append(_name_1, "\t");
    _builder.append(" usedClass = new ");
    String _name_2 = ip.getDisplayedClass().getName();
    _builder.append(_name_2, "\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final DetailPage dp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = dp.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("String path = ");
    URL _path = dp.getPath();
    _builder.append(_path, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    String _name_1 = dp.getDisplayedClass().getName();
    _builder.append(_name_1, "\t");
    _builder.append(" usedClass = new ");
    String _name_2 = dp.getDisplayedClass().getName();
    _builder.append(_name_2, "\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final StaticPage sp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = sp.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("String path = ");
    URL _path = sp.getPath();
    _builder.append(_path, "\t");
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ContentLayer c) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<WebClass> _classes = c.getClasses();
      for(final WebClass cl : _classes) {
        CharSequence _compile = this.compile(cl);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final WebClass cl) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = cl.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<Attribute> _attributes = cl.getAttributes();
      for(final Attribute a : _attributes) {
        _builder.append("\t");
        CharSequence _compile = this.compile(a);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Attribute a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      AppTypes _type = a.getType();
      boolean _equals = Objects.equal(_type, AppTypes.BOOLEAN);
      if (_equals) {
        _builder.append("private boolean ");
        String _name = a.getName();
        _builder.append(_name);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
      } else {
        AppTypes _type_1 = a.getType();
        boolean _equals_1 = Objects.equal(_type_1, AppTypes.INTEGER);
        if (_equals_1) {
          _builder.append("private int ");
          String _name_1 = a.getName();
          _builder.append(_name_1);
          _builder.append(";");
          _builder.newLineIfNotEmpty();
        } else {
          AppTypes _type_2 = a.getType();
          boolean _equals_2 = Objects.equal(_type_2, AppTypes.FLOAT);
          if (_equals_2) {
            _builder.append("private float ");
            String _name_2 = a.getName();
            _builder.append(_name_2);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
          } else {
            AppTypes _type_3 = a.getType();
            boolean _equals_3 = Objects.equal(_type_3, AppTypes.DOUBLE);
            if (_equals_3) {
              _builder.append("private double ");
              String _name_3 = a.getName();
              _builder.append(_name_3);
              _builder.append(";");
              _builder.newLineIfNotEmpty();
            } else {
              AppTypes _type_4 = a.getType();
              boolean _equals_4 = Objects.equal(_type_4, AppTypes.STRING);
              if (_equals_4) {
                _builder.append("private String ");
                String _name_4 = a.getName();
                _builder.append(_name_4);
                _builder.append(";");
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
      }
    }
    return _builder;
  }
}
