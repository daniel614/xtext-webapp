/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.wappm.generator;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import org.eclipse.emf.common.util.EList;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import org.xtext.example.wappm.wappm.AppTypes;
import org.xtext.example.wappm.wappm.Attribute;
import org.xtext.example.wappm.wappm.ContentLayer;
import org.xtext.example.wappm.wappm.DetailPage;
import org.xtext.example.wappm.wappm.DynamicPage;
import org.xtext.example.wappm.wappm.HypertextLayer;
import org.xtext.example.wappm.wappm.IndexPage;
import org.xtext.example.wappm.wappm.Link;
import org.xtext.example.wappm.wappm.Page;
import org.xtext.example.wappm.wappm.StaticPage;
import org.xtext.example.wappm.wappm.WebClass;
import org.xtext.example.wappm.wappm.WebModel;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class WappmGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    Iterable<WebModel> _filter = Iterables.<WebModel>filter(IteratorExtensions.<EObject>toIterable(resource.getAllContents()), WebModel.class);
    for (final WebModel w : _filter) {
      String _name = w.getName();
      String _plus = (_name + ".java");
      fsa.generateFile(_plus, 
        this.compile(w));
    }
  }
  
  public CharSequence compile(final WebModel w) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("package ");
    String _name = w.getName();
    _builder.append(_name);
    _builder.append(";");
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("// Generated HyperText");
    _builder.newLine();
    CharSequence _compile = this.compile(w.getHypertext());
    _builder.append(_compile);
    _builder.newLineIfNotEmpty();
    _builder.newLine();
    _builder.append("// Generated Content");
    _builder.newLine();
    CharSequence _compile_1 = this.compile(w.getContent());
    _builder.append(_compile_1);
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence compile(final HypertextLayer h) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<Page> _pages = h.getPages();
      for(final Page p : _pages) {
        CharSequence _compile = this.compile(p);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final Page p) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((p instanceof DynamicPage)) {
        CharSequence _compile = this.compile(((DynamicPage) p));
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      } else {
        if ((p instanceof StaticPage)) {
          CharSequence _compile_1 = this.compile(((StaticPage) p));
          _builder.append(_compile_1);
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final DynamicPage dp) {
    StringConcatenation _builder = new StringConcatenation();
    {
      if ((dp instanceof IndexPage)) {
        CharSequence _compile = this.compile(((IndexPage) dp));
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      } else {
        if ((dp instanceof DetailPage)) {
          CharSequence _compile_1 = this.compile(((DetailPage) dp));
          _builder.append(_compile_1);
          _builder.newLineIfNotEmpty();
        }
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final IndexPage ip) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = ip.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private String path = \"");
    String _path = ip.getPath();
    _builder.append(_path, "\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    String _name_1 = ip.getDisplayedClass().getName();
    _builder.append(_name_1, "\t");
    _builder.append(" usedClass = new ");
    String _name_2 = ip.getDisplayedClass().getName();
    _builder.append(_name_2, "\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Link> _links = ip.getLinks();
      for(final Link l : _links) {
        _builder.append("\t");
        CharSequence _compile = this.compile(l);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final DetailPage dp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = dp.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private String path = \"");
    String _path = dp.getPath();
    _builder.append(_path, "\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    _builder.append("\t");
    String _name_1 = dp.getDisplayedClass().getName();
    _builder.append(_name_1, "\t");
    _builder.append(" usedClass = new ");
    String _name_2 = dp.getDisplayedClass().getName();
    _builder.append(_name_2, "\t");
    _builder.append("();");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Link> _links = dp.getLinks();
      for(final Link l : _links) {
        _builder.append("\t");
        CharSequence _compile = this.compile(l);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final StaticPage sp) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = sp.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("private String path = \"");
    String _path = sp.getPath();
    _builder.append(_path, "\t");
    _builder.append("\";");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.newLine();
    {
      EList<Link> _links = sp.getLinks();
      for(final Link l : _links) {
        _builder.append("\t");
        CharSequence _compile = this.compile(l);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Link l) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("public void linkTo");
    String _firstUpper = StringExtensions.toFirstUpper(l.getPage().getName());
    _builder.append(_firstUpper);
    _builder.append("() {");
    _builder.newLineIfNotEmpty();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final ContentLayer c) {
    StringConcatenation _builder = new StringConcatenation();
    {
      EList<WebClass> _classes = c.getClasses();
      for(final WebClass cl : _classes) {
        CharSequence _compile = this.compile(cl);
        _builder.append(_compile);
        _builder.newLineIfNotEmpty();
      }
    }
    return _builder;
  }
  
  public CharSequence compile(final WebClass cl) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("class ");
    String _name = cl.getName();
    _builder.append(_name);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    {
      EList<Attribute> _attributes = cl.getAttributes();
      for(final Attribute a : _attributes) {
        _builder.append("\t");
        CharSequence _compile = this.compile(a);
        _builder.append(_compile, "\t");
        _builder.newLineIfNotEmpty();
      }
    }
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  public CharSequence compile(final Attribute a) {
    StringConcatenation _builder = new StringConcatenation();
    {
      AppTypes _type = a.getType();
      boolean _equals = Objects.equal(_type, AppTypes.BOOLEAN);
      if (_equals) {
        _builder.append("private boolean ");
        String _name = a.getName();
        _builder.append(_name);
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("public boolean get");
        String _firstUpper = StringExtensions.toFirstUpper(a.getName());
        _builder.append(_firstUpper);
        _builder.append("() {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("return ");
        String _name_1 = a.getName();
        _builder.append(_name_1, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
        _builder.append("        ");
        _builder.newLine();
        _builder.append("public void set");
        String _firstUpper_1 = StringExtensions.toFirstUpper(a.getName());
        _builder.append(_firstUpper_1);
        _builder.append("(boolean ");
        String _name_2 = a.getName();
        _builder.append(_name_2);
        _builder.append(") {");
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("this.");
        String _name_3 = a.getName();
        _builder.append(_name_3, "\t");
        _builder.append(" = ");
        String _name_4 = a.getName();
        _builder.append(_name_4, "\t");
        _builder.append(";");
        _builder.newLineIfNotEmpty();
        _builder.append("}");
        _builder.newLine();
      } else {
        AppTypes _type_1 = a.getType();
        boolean _equals_1 = Objects.equal(_type_1, AppTypes.INTEGER);
        if (_equals_1) {
          _builder.append("private int ");
          String _name_5 = a.getName();
          _builder.append(_name_5);
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.newLine();
          _builder.append("public boolean get");
          String _firstUpper_2 = StringExtensions.toFirstUpper(a.getName());
          _builder.append(_firstUpper_2);
          _builder.append("() {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("return ");
          String _name_6 = a.getName();
          _builder.append(_name_6, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
          _builder.append("        ");
          _builder.newLine();
          _builder.append("public void set");
          String _firstUpper_3 = StringExtensions.toFirstUpper(a.getName());
          _builder.append(_firstUpper_3);
          _builder.append("(int ");
          String _name_7 = a.getName();
          _builder.append(_name_7);
          _builder.append(") {");
          _builder.newLineIfNotEmpty();
          _builder.append("\t");
          _builder.append("this.");
          String _name_8 = a.getName();
          _builder.append(_name_8, "\t");
          _builder.append(" = ");
          String _name_9 = a.getName();
          _builder.append(_name_9, "\t");
          _builder.append(";");
          _builder.newLineIfNotEmpty();
          _builder.append("}");
          _builder.newLine();
        } else {
          AppTypes _type_2 = a.getType();
          boolean _equals_2 = Objects.equal(_type_2, AppTypes.FLOAT);
          if (_equals_2) {
            _builder.append("private float ");
            String _name_10 = a.getName();
            _builder.append(_name_10);
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.newLine();
            _builder.append("public boolean get");
            String _firstUpper_4 = StringExtensions.toFirstUpper(a.getName());
            _builder.append(_firstUpper_4);
            _builder.append("() {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("return ");
            String _name_11 = a.getName();
            _builder.append(_name_11, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
            _builder.append("        ");
            _builder.newLine();
            _builder.append("public void set");
            String _firstUpper_5 = StringExtensions.toFirstUpper(a.getName());
            _builder.append(_firstUpper_5);
            _builder.append("(float ");
            String _name_12 = a.getName();
            _builder.append(_name_12);
            _builder.append(") {");
            _builder.newLineIfNotEmpty();
            _builder.append("\t");
            _builder.append("this.");
            String _name_13 = a.getName();
            _builder.append(_name_13, "\t");
            _builder.append(" = ");
            String _name_14 = a.getName();
            _builder.append(_name_14, "\t");
            _builder.append(";");
            _builder.newLineIfNotEmpty();
            _builder.append("}");
            _builder.newLine();
          } else {
            AppTypes _type_3 = a.getType();
            boolean _equals_3 = Objects.equal(_type_3, AppTypes.DOUBLE);
            if (_equals_3) {
              _builder.append("private double ");
              String _name_15 = a.getName();
              _builder.append(_name_15);
              _builder.append(";");
              _builder.newLineIfNotEmpty();
              _builder.newLine();
              _builder.append("public boolean get");
              String _firstUpper_6 = StringExtensions.toFirstUpper(a.getName());
              _builder.append(_firstUpper_6);
              _builder.append("() {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("return ");
              String _name_16 = a.getName();
              _builder.append(_name_16, "\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
              _builder.append("}");
              _builder.newLine();
              _builder.append("        ");
              _builder.newLine();
              _builder.append("public void set");
              String _firstUpper_7 = StringExtensions.toFirstUpper(a.getName());
              _builder.append(_firstUpper_7);
              _builder.append("(double ");
              String _name_17 = a.getName();
              _builder.append(_name_17);
              _builder.append(") {");
              _builder.newLineIfNotEmpty();
              _builder.append("\t");
              _builder.append("this.");
              String _name_18 = a.getName();
              _builder.append(_name_18, "\t");
              _builder.append(" = ");
              String _name_19 = a.getName();
              _builder.append(_name_19, "\t");
              _builder.append(";");
              _builder.newLineIfNotEmpty();
              _builder.append("}");
              _builder.newLine();
            } else {
              AppTypes _type_4 = a.getType();
              boolean _equals_4 = Objects.equal(_type_4, AppTypes.STRING);
              if (_equals_4) {
                _builder.append("private String ");
                String _name_20 = a.getName();
                _builder.append(_name_20);
                _builder.append(";");
                _builder.newLineIfNotEmpty();
                _builder.newLine();
                _builder.append("public boolean get");
                String _firstUpper_8 = StringExtensions.toFirstUpper(a.getName());
                _builder.append(_firstUpper_8);
                _builder.append("() {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("return ");
                String _name_21 = a.getName();
                _builder.append(_name_21, "\t");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
                _builder.append("}");
                _builder.newLine();
                _builder.append("        ");
                _builder.newLine();
                _builder.append("public void set");
                String _firstUpper_9 = StringExtensions.toFirstUpper(a.getName());
                _builder.append(_firstUpper_9);
                _builder.append("(String ");
                String _name_22 = a.getName();
                _builder.append(_name_22);
                _builder.append(") {");
                _builder.newLineIfNotEmpty();
                _builder.append("\t");
                _builder.append("this.");
                String _name_23 = a.getName();
                _builder.append(_name_23, "\t");
                _builder.append(" = ");
                String _name_24 = a.getName();
                _builder.append(_name_24, "\t");
                _builder.append(";");
                _builder.newLineIfNotEmpty();
                _builder.append("}");
                _builder.newLine();
              }
            }
          }
        }
      }
    }
    return _builder;
  }
}
