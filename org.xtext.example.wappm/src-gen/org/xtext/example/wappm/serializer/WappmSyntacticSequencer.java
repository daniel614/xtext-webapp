/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.wappm.serializer;

import com.google.inject.Inject;
import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.IGrammarAccess;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.nodemodel.INode;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AbstractElementAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.AlternativeAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.GroupAlias;
import org.eclipse.xtext.serializer.analysis.GrammarAlias.TokenAlias;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynNavigable;
import org.eclipse.xtext.serializer.analysis.ISyntacticSequencerPDAProvider.ISynTransition;
import org.eclipse.xtext.serializer.sequencer.AbstractSyntacticSequencer;
import org.xtext.example.wappm.services.WappmGrammarAccess;

@SuppressWarnings("all")
public class WappmSyntacticSequencer extends AbstractSyntacticSequencer {

	protected WappmGrammarAccess grammarAccess;
	protected AbstractElementAlias match_URL___IDTerminalRuleCall_1_1_1_0_SolidusKeyword_1_1_0__a;
	protected AbstractElementAlias match_URL___SolidusKeyword_1_0_or___SolidusKeyword_1_1_0_IDTerminalRuleCall_1_1_1_0__p__q;
	protected AbstractElementAlias match_URL___SolidusKeyword_1_1_0_IDTerminalRuleCall_1_1_1_0__a;
	
	@Inject
	protected void init(IGrammarAccess access) {
		grammarAccess = (WappmGrammarAccess) access;
		match_URL___IDTerminalRuleCall_1_1_1_0_SolidusKeyword_1_1_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getURLAccess().getIDTerminalRuleCall_1_1_1_0()), new TokenAlias(false, false, grammarAccess.getURLAccess().getSolidusKeyword_1_1_0()));
		match_URL___SolidusKeyword_1_0_or___SolidusKeyword_1_1_0_IDTerminalRuleCall_1_1_1_0__p__q = new AlternativeAlias(false, true, new GroupAlias(true, false, new TokenAlias(false, false, grammarAccess.getURLAccess().getSolidusKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getURLAccess().getIDTerminalRuleCall_1_1_1_0())), new TokenAlias(false, false, grammarAccess.getURLAccess().getSolidusKeyword_1_0()));
		match_URL___SolidusKeyword_1_1_0_IDTerminalRuleCall_1_1_1_0__a = new GroupAlias(true, true, new TokenAlias(false, false, grammarAccess.getURLAccess().getSolidusKeyword_1_1_0()), new TokenAlias(false, false, grammarAccess.getURLAccess().getIDTerminalRuleCall_1_1_1_0()));
	}
	
	@Override
	protected String getUnassignedRuleCallToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (ruleCall.getRule() == grammarAccess.getIDRule())
			return getIDToken(semanticObject, ruleCall, node);
		return "";
	}
	
	/**
	 * terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	 */
	protected String getIDToken(EObject semanticObject, RuleCall ruleCall, INode node) {
		if (node != null)
			return getTokenText(node);
		return "";
	}
	
	@Override
	protected void emitUnassignedTokens(EObject semanticObject, ISynTransition transition, INode fromNode, INode toNode) {
		if (transition.getAmbiguousSyntaxes().isEmpty()) return;
		List<INode> transitionNodes = collectNodes(fromNode, toNode);
		for (AbstractElementAlias syntax : transition.getAmbiguousSyntaxes()) {
			List<INode> syntaxNodes = getNodesFor(transitionNodes, syntax);
			if (match_URL___IDTerminalRuleCall_1_1_1_0_SolidusKeyword_1_1_0__a.equals(syntax))
				emit_URL___IDTerminalRuleCall_1_1_1_0_SolidusKeyword_1_1_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_URL___SolidusKeyword_1_0_or___SolidusKeyword_1_1_0_IDTerminalRuleCall_1_1_1_0__p__q.equals(syntax))
				emit_URL___SolidusKeyword_1_0_or___SolidusKeyword_1_1_0_IDTerminalRuleCall_1_1_1_0__p__q(semanticObject, getLastNavigableState(), syntaxNodes);
			else if (match_URL___SolidusKeyword_1_1_0_IDTerminalRuleCall_1_1_1_0__a.equals(syntax))
				emit_URL___SolidusKeyword_1_1_0_IDTerminalRuleCall_1_1_1_0__a(semanticObject, getLastNavigableState(), syntaxNodes);
			else acceptNodes(getLastNavigableState(), syntaxNodes);
		}
	}

	/**
	 * Ambiguous syntax:
	 *     (ID '/')*
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) '/' (ambiguity) addition+=URL_ADDITION
	 *     addition+=URL_ADDITION '/' (ambiguity) addition+=URL_ADDITION
	 */
	protected void emit_URL___IDTerminalRuleCall_1_1_1_0_SolidusKeyword_1_1_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('/' | ('/' ID)+)?
	 *
	 * This ambiguous syntax occurs at:
	 *     (rule start) (ambiguity) (rule start)
	 */
	protected void emit_URL___SolidusKeyword_1_0_or___SolidusKeyword_1_1_0_IDTerminalRuleCall_1_1_1_0__p__q(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
	/**
	 * Ambiguous syntax:
	 *     ('/' ID)*
	 *
	 * This ambiguous syntax occurs at:
	 *     addition+=URL_ADDITION (ambiguity) (rule end)
	 */
	protected void emit_URL___SolidusKeyword_1_1_0_IDTerminalRuleCall_1_1_1_0__a(EObject semanticObject, ISynNavigable transition, List<INode> nodes) {
		acceptNodes(transition, nodes);
	}
	
}
