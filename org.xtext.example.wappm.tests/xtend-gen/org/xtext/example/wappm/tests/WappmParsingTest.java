/**
 * generated by Xtext 2.14.0
 */
package org.xtext.example.wappm.tests;

import com.google.inject.Inject;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.testing.InjectWith;
import org.eclipse.xtext.testing.XtextRunner;
import org.eclipse.xtext.testing.util.ParseHelper;
import org.eclipse.xtext.testing.validation.ValidationTestHelper;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.xtext.example.wappm.tests.WappmInjectorProvider;
import org.xtext.example.wappm.wappm.WappmPackage;
import org.xtext.example.wappm.wappm.WebModel;

@RunWith(XtextRunner.class)
@InjectWith(WappmInjectorProvider.class)
@SuppressWarnings("all")
public class WappmParsingTest {
  @Inject
  private ParseHelper<WebModel> parser;
  
  @Inject
  private ValidationTestHelper validator;
  
  @Test
  public void shouldValidateModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("webapp TestApp {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("hypertext TestHyper {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("detail TestDetail uses SomeClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("path /test/");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("links {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("link {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("page TestIndex");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("index TestIndex uses TestClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("path /test/");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("size 3");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("static TestStatic {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("path /home/");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("content TestContent {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("class Blub {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("attr name: Integer");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("ref {");
      _builder.newLine();
      _builder.append("\t\t\t\t ");
      _builder.append("role test");
      _builder.newLine();
      _builder.append("\t\t\t\t ");
      _builder.append("bound[3,5]");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("class TestClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("attr SampleAttr : String");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("class SomeClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("attr SampleAttr2 : String");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final WebModel model = this.parser.parse(_builder);
      this.validator.assertNoErrors(model);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void shouldOutputWarningAboutCapitalLetterWebModel() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("webapp testApp {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("hypertext TestHyper {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("detail TestDetail uses SomeClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("path /test/");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("links {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("link {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("page TestIndex");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("index TestIndex uses TestClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("path /test/");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("size 3");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("static TestStatic {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("path /home/");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("content TestContent {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("class Blub {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("attr name: Integer");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("ref {");
      _builder.newLine();
      _builder.append("\t\t\t\t ");
      _builder.append("role test");
      _builder.newLine();
      _builder.append("\t\t\t\t ");
      _builder.append("bound[3,5]");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("class TestClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("attr SampleAttr : String");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("class SomeClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("attr SampleAttr2 : String");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final WebModel model = this.parser.parse(_builder);
      this.validator.assertWarning(model, WappmPackage.Literals.WEB_MODEL, null, "Name should start with a capital letter");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void shouldOutputWarningAboutCapitalLetterClass() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("webapp TestApp {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("hypertext TestHyper {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("detail TestDetail uses SomeClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("path /test/");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("links {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("link {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("page TestIndex");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("index TestIndex uses TestClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("path /test/");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("size 3");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("static TestStatic {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("path /home/");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("content TestContent {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("class blub {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("attr name: Integer");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("ref {");
      _builder.newLine();
      _builder.append("\t\t\t\t ");
      _builder.append("role test");
      _builder.newLine();
      _builder.append("\t\t\t\t ");
      _builder.append("bound[3,5]");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("class TestClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("attr SampleAttr : String");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("class SomeClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("attr SampleAttr2 : String");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final WebModel model = this.parser.parse(_builder);
      this.validator.assertWarning(model, WappmPackage.Literals.WEB_CLASS, null, "Name should start with a capital letter");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void shouldOutputWarningAboutUniqueClass() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("webapp TestApp {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("hypertext TestHyper {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("detail TestDetail uses SomeClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("path /test/");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("links {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("link {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("page TestIndex");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("index TestIndex uses TestClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("path /test/");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("size 3");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("static TestStatic {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("path /home/");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("content TestContent {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("class Blub {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("attr name: Integer");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("ref {");
      _builder.newLine();
      _builder.append("\t\t\t\t ");
      _builder.append("role test");
      _builder.newLine();
      _builder.append("\t\t\t\t ");
      _builder.append("bound[3,5]");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("class Blub {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("attr SampleAttr : String");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("class SomeClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("attr SampleAttr2 : String");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final WebModel model = this.parser.parse(_builder);
      this.validator.assertError(model, WappmPackage.Literals.WEB_CLASS, null, "Class name must be unique");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  @Test
  public void shouldOutputWarningAboutUpBoundLowBound() {
    try {
      StringConcatenation _builder = new StringConcatenation();
      _builder.append("webapp TestApp {");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("hypertext TestHyper {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("detail TestDetail uses SomeClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("path /test/");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("links {");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("link {");
      _builder.newLine();
      _builder.append("\t\t\t\t\t");
      _builder.append("page TestIndex");
      _builder.newLine();
      _builder.append("\t\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("index TestIndex uses TestClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("path /test/");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("size 3");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("static TestStatic {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("path /home/");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("content TestContent {");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("class Blub {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("attr name: Integer");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("ref {");
      _builder.newLine();
      _builder.append("\t\t\t\t ");
      _builder.append("role test");
      _builder.newLine();
      _builder.append("\t\t\t\t ");
      _builder.append("bound[4,3]");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("class Blub {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("attr SampleAttr : String");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("class SomeClass {");
      _builder.newLine();
      _builder.append("\t\t\t");
      _builder.append("attr SampleAttr2 : String");
      _builder.newLine();
      _builder.append("\t\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("\t");
      _builder.append("}");
      _builder.newLine();
      _builder.append("}");
      _builder.newLine();
      final WebModel model = this.parser.parse(_builder);
      this.validator.assertError(model, WappmPackage.Literals.REFERENCE, null, "lowbound must be smaller or equal to upBound");
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
