/*
 * generated by Xtext 2.14.0
 */
package org.xtext.example.wappm.serializer;

import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.acceptor.SequenceFeeder;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService.ValueTransient;
import org.xtext.example.wappm.services.WappmGrammarAccess;
import org.xtext.example.wappm.wappm.Attribute;
import org.xtext.example.wappm.wappm.ContentLayer;
import org.xtext.example.wappm.wappm.DetailPage;
import org.xtext.example.wappm.wappm.HypertextLayer;
import org.xtext.example.wappm.wappm.IndexPage;
import org.xtext.example.wappm.wappm.Link;
import org.xtext.example.wappm.wappm.StaticPage;
import org.xtext.example.wappm.wappm.URL;
import org.xtext.example.wappm.wappm.URL_ADDITION;
import org.xtext.example.wappm.wappm.WappmPackage;
import org.xtext.example.wappm.wappm.WebClass;
import org.xtext.example.wappm.wappm.WebModel;

@SuppressWarnings("all")
public class WappmSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private WappmGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == WappmPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case WappmPackage.ATTRIBUTE:
				sequence_Attribute(context, (Attribute) semanticObject); 
				return; 
			case WappmPackage.CONTENT_LAYER:
				sequence_ContentLayer(context, (ContentLayer) semanticObject); 
				return; 
			case WappmPackage.DETAIL_PAGE:
				sequence_DetailPage(context, (DetailPage) semanticObject); 
				return; 
			case WappmPackage.HYPERTEXT_LAYER:
				sequence_HypertextLayer(context, (HypertextLayer) semanticObject); 
				return; 
			case WappmPackage.INDEX_PAGE:
				sequence_IndexPage(context, (IndexPage) semanticObject); 
				return; 
			case WappmPackage.LINK:
				sequence_Link(context, (Link) semanticObject); 
				return; 
			case WappmPackage.STATIC_PAGE:
				sequence_StaticPage(context, (StaticPage) semanticObject); 
				return; 
			case WappmPackage.URL:
				sequence_URL(context, (URL) semanticObject); 
				return; 
			case WappmPackage.URL_ADDITION:
				sequence_URL_ADDITION(context, (URL_ADDITION) semanticObject); 
				return; 
			case WappmPackage.WEB_CLASS:
				sequence_WebClass(context, (WebClass) semanticObject); 
				return; 
			case WappmPackage.WEB_MODEL:
				sequence_WebModel(context, (WebModel) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     Attribute returns Attribute
	 *
	 * Constraint:
	 *     (name=ID type=AppTypes)
	 */
	protected void sequence_Attribute(ISerializationContext context, Attribute semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WappmPackage.Literals.ATTRIBUTE__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WappmPackage.Literals.ATTRIBUTE__NAME));
			if (transientValues.isValueTransient(semanticObject, WappmPackage.Literals.ATTRIBUTE__TYPE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WappmPackage.Literals.ATTRIBUTE__TYPE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getAttributeAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getAttributeAccess().getTypeAppTypesEnumRuleCall_3_0(), semanticObject.getType());
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     ContentLayer returns ContentLayer
	 *
	 * Constraint:
	 *     (contentName=ID classes+=WebClass+)
	 */
	protected void sequence_ContentLayer(ISerializationContext context, ContentLayer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Page returns DetailPage
	 *     DynamicPage returns DetailPage
	 *     DetailPage returns DetailPage
	 *
	 * Constraint:
	 *     (name=ID displayedClass=[WebClass|ID] path=URL (links+=Link links+=Link*)?)
	 */
	protected void sequence_DetailPage(ISerializationContext context, DetailPage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     HypertextLayer returns HypertextLayer
	 *
	 * Constraint:
	 *     (hyperName=ID pages+=Page+)
	 */
	protected void sequence_HypertextLayer(ISerializationContext context, HypertextLayer semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Page returns IndexPage
	 *     DynamicPage returns IndexPage
	 *     IndexPage returns IndexPage
	 *
	 * Constraint:
	 *     (name=ID displayedClass=[WebClass|ID] path=URL (links+=Link links+=Link*)?)
	 */
	protected void sequence_IndexPage(ISerializationContext context, IndexPage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Link returns Link
	 *
	 * Constraint:
	 *     page=[Page|ID]
	 */
	protected void sequence_Link(ISerializationContext context, Link semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WappmPackage.Literals.LINK__PAGE) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WappmPackage.Literals.LINK__PAGE));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getLinkAccess().getPagePageIDTerminalRuleCall_3_0_1(), semanticObject.eGet(WappmPackage.Literals.LINK__PAGE, false));
		feeder.finish();
	}
	
	
	/**
	 * Contexts:
	 *     Page returns StaticPage
	 *     StaticPage returns StaticPage
	 *
	 * Constraint:
	 *     (name=ID path=URL (links+=Link links+=Link*)?)
	 */
	protected void sequence_StaticPage(ISerializationContext context, StaticPage semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     URL_ADDITION returns URL_ADDITION
	 *
	 * Constraint:
	 *     (name=ID | name=ID)
	 */
	protected void sequence_URL_ADDITION(ISerializationContext context, URL_ADDITION semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     URL returns URL
	 *
	 * Constraint:
	 *     addition+=URL_ADDITION*
	 */
	protected void sequence_URL(ISerializationContext context, URL semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WebClass returns WebClass
	 *
	 * Constraint:
	 *     (name=ID attributes+=Attribute+ uniqueIdentifier=[Attribute|ID])
	 */
	protected void sequence_WebClass(ISerializationContext context, WebClass semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     WebModel returns WebModel
	 *
	 * Constraint:
	 *     (name=ID hypertext=HypertextLayer content=ContentLayer)
	 */
	protected void sequence_WebModel(ISerializationContext context, WebModel semanticObject) {
		if (errorAcceptor != null) {
			if (transientValues.isValueTransient(semanticObject, WappmPackage.Literals.WEB_MODEL__NAME) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WappmPackage.Literals.WEB_MODEL__NAME));
			if (transientValues.isValueTransient(semanticObject, WappmPackage.Literals.WEB_MODEL__HYPERTEXT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WappmPackage.Literals.WEB_MODEL__HYPERTEXT));
			if (transientValues.isValueTransient(semanticObject, WappmPackage.Literals.WEB_MODEL__CONTENT) == ValueTransient.YES)
				errorAcceptor.accept(diagnosticProvider.createFeatureValueMissing(semanticObject, WappmPackage.Literals.WEB_MODEL__CONTENT));
		}
		SequenceFeeder feeder = createSequencerFeeder(context, semanticObject);
		feeder.accept(grammarAccess.getWebModelAccess().getNameIDTerminalRuleCall_1_0(), semanticObject.getName());
		feeder.accept(grammarAccess.getWebModelAccess().getHypertextHypertextLayerParserRuleCall_3_0(), semanticObject.getHypertext());
		feeder.accept(grammarAccess.getWebModelAccess().getContentContentLayerParserRuleCall_4_0(), semanticObject.getContent());
		feeder.finish();
	}
	
	
}
